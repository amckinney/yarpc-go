// Code generated by thriftrw-plugin-yarpc
// @generated

package barclient

import (
	"context"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/thrift"
	"go.uber.org/yarpc/encoding/thrift/thriftrw-plugin-yarpc/internal/tests/extends"
	"go.uber.org/yarpc/encoding/thrift/thriftrw-plugin-yarpc/internal/tests/extends/fooclient"
	"reflect"
)

// Interface is a client for the Bar service.
type Interface interface {
	fooclient.Interface

	Bar(
		ctx context.Context,
		opts ...yarpc.CallOption,
	) error
}

// New builds a new client for the Bar service.
//
// 	client := barclient.New(dispatcher.ClientConfig("bar"))
func New(c transport.ClientConfig, opts ...thrift.ClientOption) Interface {
	return client{
		c: thrift.New(thrift.Config{
			Service:      "Bar",
			ClientConfig: c,
		}, opts...),
		Interface: fooclient.New(c, opts...),
	}
}

func init() {
	yarpc.RegisterClientBuilder(
		func(c transport.ClientConfig, f reflect.StructField) Interface {
			return New(c, thrift.ClientBuilderOptions(c, f)...)
		},
	)
}

type client struct {
	fooclient.Interface

	c thrift.Client
}

func (c client) Bar(
	ctx context.Context,
	opts ...yarpc.CallOption,
) (err error) {

	args := extends.Bar_Bar_Helper.Args()

	var body wire.Value
	body, err = c.c.Call(ctx, args, opts...)
	if err != nil {
		return
	}

	var result extends.Bar_Bar_Result
	if err = result.FromWire(body); err != nil {
		return
	}

	err = extends.Bar_Bar_Helper.UnwrapResponse(&result)
	return
}
