// Code generated by thriftrw-plugin-yarpc
// @generated

package barserver

import (
	"context"
	"go.uber.org/thriftrw/wire"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/thrift"
	"go.uber.org/yarpc/encoding/thrift/thriftrw-plugin-yarpc/internal/tests/extends"
	"go.uber.org/yarpc/encoding/thrift/thriftrw-plugin-yarpc/internal/tests/extends/fooserver"
)

// Interface is the server-side interface for the Bar service.
type Interface interface {
	fooserver.Interface

	Bar(
		ctx context.Context,
	) error
}

// New prepares an implementation of the Bar service for
// registration.
//
// 	handler := BarHandler{}
// 	dispatcher.Register(barserver.New(handler))
func New(impl Interface, opts ...thrift.RegisterOption) []transport.Procedure {
	h := handler{impl}
	service := thrift.Service{
		Name: "Bar",
		Methods: []thrift.Method{

			thrift.Method{
				Name: "bar",
				HandlerSpec: thrift.HandlerSpec{

					Type:  transport.Unary,
					Unary: thrift.UnaryHandler(h.Bar),
				},
				Signature:    "Bar()",
				ThriftModule: extends.ThriftModule,
			},
		},
	}

	procedures := make([]transport.Procedure, 0, 1)
	procedures = append(procedures, fooserver.New(impl, opts...)...)
	procedures = append(procedures, thrift.BuildProcedures(service, opts...)...)
	return procedures
}

type handler struct{ impl Interface }

func (h handler) Bar(ctx context.Context, body wire.Value) (thrift.Response, error) {
	var args extends.Bar_Bar_Args
	if err := args.FromWire(body); err != nil {
		return thrift.Response{}, err
	}

	err := h.impl.Bar(ctx)

	hadError := err != nil
	result, err := extends.Bar_Bar_Helper.WrapResponse(err)

	var response thrift.Response
	if err == nil {
		response.IsApplicationError = hadError
		response.Body = result
	}
	return response, err
}
